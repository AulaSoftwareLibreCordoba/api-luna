name: Docker Deploy

on:
  push:
    branches:
      - master  # Cambia esto a la rama que prefieras

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build -t auladesoftwarelibre/api-image:${{ github.sha }} .

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
        run: |
          # Crear directorio .ssh
          mkdir -p ~/.ssh
          
          # Guardar la clave SSH
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Agregar el host a known_hosts
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts

      - name: Transfer Docker image to server
        run: |
          # Guarda la imagen como tar
          docker save auladesoftwarelibre/api-image:${{ github.sha }} | gzip > my-image.tar.gz
          
          # Verifica que el archivo se creó correctamente
          ls -lh my-image.tar.gz
          
          # Conecta al servidor y transfiere la imagen
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa my-image.tar.gz $SERVER_USER@$SERVER_HOST:/tmp/my-image.tar.gz
          
          # Conéctate al servidor para cargar y ejecutar la imagen
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST << 'EOF'
            echo "Conectado al servidor: $(hostname)"
            echo "Versión de Docker: $(docker --version)"
            
            # Cargar la imagen desde el tar.gz
            gunzip -c /tmp/my-image.tar.gz | docker load
            
            # Verifica que la imagen se haya cargado
            docker images

            # Detener y eliminar el contenedor existente
            docker stop my-container || true
            docker rm my-container || true

            # Ejecutar el nuevo contenedor
            docker run -d --name my-container -p 8080:8080 auladesoftwarelibre/api-image:${{ github.sha }}
          EOF
