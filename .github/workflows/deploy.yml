name: Docker Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build -t auladesoftwarelibre/api-image:${{ github.sha }} .

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass
  
      - name: Transfer Docker image to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Guarda la imagen como tar
          docker save auladesoftwarelibre/api-image:${{ github.sha }} | gzip > my-image.tar.gz
  
          # Verifica que el archivo se creó correctamente
          ls -lh my-image.tar.gz
  
          # Conecta al servidor y transfiere la imagen usando sshpass
          sshpass -p $SERVER_PASSWORD scp -o StrictHostKeyChecking=no my-image.tar.gz $SERVER_USER@$SERVER_HOST:/tmp/my-image.tar.gz
  
          # Conéctate al servidor y carga la imagen
          sshpass -p $SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
            # Comprobar si el archivo existe antes de cargar
            if [ -f /tmp/my-image.tar.gz ]; then
              echo "Cargando imagen..."
              gunzip -c /tmp/my-image.tar.gz | docker load
              echo "Imagen cargada."
            else
              echo "El archivo no se encontró. No se puede cargar la imagen."
              exit 1
            fi
  
            # Verifica que la imagen se haya cargado
            docker images
  
            # Detener y eliminar el contenedor existente
            docker stop my-container || true
            docker rm my-container || true
  
            # Ejecutar el nuevo contenedor
            docker run -d --name my-container -p 8080:8080 auladesoftwarelibre/api-image:${{ github.sha }} || echo "Error al ejecutar el contenedor"
          EOF

