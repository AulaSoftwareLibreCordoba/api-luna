name: Docker Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build -t auladesoftwarelibre/api-image:${{ github.sha }} .
          echo "Docker image built."

      - name: Save Docker image
        run: |
          docker save auladesoftwarelibre/api-image:${{ github.sha }} | gzip > my-image.tar.gz
          echo "Image saved as my-image.tar.gz."
          ls -lh my-image.tar.gz  # Confirma que el archivo fue creado

      - name: Echo image name
        run: |
          echo "Image name: auladesoftwarelibre/api-image:${{ github.sha }}"
          echo "SHA: ${{ github.sha }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass
  
      - name: Transfer Docker image to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Conecta al servidor y transfiere la imagen usando sshpass
          sshpass -p $SERVER_PASSWORD scp -o StrictHostKeyChecking=no my-image.tar.gz $SERVER_USER@$SERVER_HOST:/tmp/my-image.tar.gz
          
          # Verifica si el archivo fue transferido correctamente
          sshpass -p $SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
            cd /tmp  # Cambia al directorio donde se transfiere la imagen
            if [ -f my-image.tar.gz ]; then
              echo "Archivo transferido correctamente."
            else
              echo "Error: El archivo no se encontrÃ³ en el servidor."
              exit 1
            fi
          EOF
